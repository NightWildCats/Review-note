1.数组（Array）
	- 数组也是一个对象，和普通的对象都是用来存储数据。
		不同的是Object是通过属性名来操作属性的
		而数组使用通过索引来操作元素的
	- 数组的存储效率比普通对象要高，
		当有大量的元素需要保存时，最好使用数组
	- 创建数组的对象
		- 方式一：
			var arr = new Array();
			var arr = new Array(10); //创建一个长度为10的数组
			
		- 方式二：
			var arr = [];
			
	- 向数组中添加元素
		- 语法：
			数组[索引] = 值;
			
	- 在创建数组时，直接添加元素
		- var arr = [元素1,元素2,...元素N];
		- var arr = new Array(元素1,元素2,...元素N);
		
	- 读取数组中的元素
		- 语法：
			数组[索引] 
			
	- 数组的属性和方法:
		- length
			- 设置或获取数组的长度
			- 获取到的是数组的最大索引+1
			- 如果是连续的数组获取到的就是数组的长度，对于非连续数组则不是（不要创建非连续的数组）。
		
		- push()
			- 向数组的末尾添加一个或多个元素，并返回数组新的长度
		- pop()
			- 删除数组的最后一个元素，并返回被删除的元素
		- unshift()
			- 想数组的开头添加一个或多个元素，并返回数组新的长度
		- shift()	
			- 删除数组的第一个元素，并返回被删除的元素
		- slice()
			- 可以从数组中截取指定的元素
			- 不会对原数组产生影响，而是将截取到内容返回
			- 参数：
				第一个参数：截取开始位置的索引（包括开始位置）
				第二个参数：截取结束位置的索引（不包括结束位置）
				- 参数可以是一个负值，如果负值则从后往前计算
				- 第二个参数可以省略，如果不写第二个参数，则从开始位置一直截取到最后
		- splice()	
			- 删除数组中的元素，或向数组中插入新的元素，并返回被删除的元素
			- 该方法会影响原数组
			- 参数：
				第一个参数：删除开始位置的索引
				第二个参数：删除的个数
				第三个参数以后：新的元素，这些元素将会插入到开始位置之前
				
		- concat()
			- 连接两个或多个数组
		- join()
			- 将一个数组中的所有的元素连接为一个字符串
			- 需要一个字符串作为参数，该字符串将会作为连接符使用，如果不传参数则使用,作为连接符
		- reverse()
			- 反转数组
		- sort()
			- 对数组进行排序
			- 默认情况下按照Unicode编码进行排序的
			- 可以通过一个回调函数来自定义排序规则
			- 用法
				//升序排列
				数组.sort(function(a , b){
					return a - b;
				});
				
				//降序排列
				数组.sort(function(a , b){
					return b - a;
				});
				
		- Array.isArray()
			- 可以判断一个对象是否是一个数组
			
	- 遍历数组
		- 遍历数组指将数组中的元素都获取到
		- 一般我们都会使用for循环来遍历数组
			for(var i=0 ; i<数组.length ; i++){
				数组[i];
			}
		- 也可以使用forEach()方法来遍历数组
			数组.forEach(function(value , index , obj){
			
			});
			- 数组中每有一个元素，回调函数就会被调用一次，
				并且每次将遍历到的信息以参数的形式传递进回调函数。
				参数：
					value 遍历到的元素
					index 遍历元素的索引
					obj   正在遍历的数组对象
					
			- 此方法不兼容IE8及以下的浏览器		
			
2.函数
	- 函数每次调用时，都会有两个隐含的参数被传递进函数
		this（上下文对象）
		arguments（实参）
			- arguments是一个类数组对象
			- 我们调用函数时传递的实参都封装到了arguments中
			- 即使不定义形参，也可以通过arguments来使用实参
			- 在arguments中有一个属性callee，代表的是当前调用的函数的对象
			
	- 函数的方法：
		call()
		apply()
			- 通过这两个方法可以来调用函数，并且可以指定函数中的this，
				他们的第一个参数将会成为函数执行的上下文对象（this）
			- 不同的是call()的参数是一个一个的列出来的
				而apply()需要将实参保存到一个数组中传递
				
	- this是函数的上下文对象，根据函数的调用方式不同，this的值也不同
		1.以函数的形式调用，this是window
		2.以方法的形式调用，this是调用方法的对象
		3.以构造函数的形式调用，this是新创建的那个对象
		4.以call()和apply()调用，this是方法的第一个参数
		
4.Date
	- Date用来表示一个时间
	- 创建对象
		- 创建一个当前的时间对象
			var d = new Date();
		- 创建一个指定的时间对象
			var d = new Date("月/日/年 时:分:秒");
			
	- 方法：
		getDate() 
			- 获取当前对象是几号（1-31）
			
		getDay() 
			- 获取当前对象时星期几（0-6）
				0 表示 周日
				1 表示 周一。。。
				
		getMonth() 
			- 从 Date 对象返回月份 (0 ~ 11)。 
			- 0表示一月， 1表示二月 。。。
			
		getFullYear() 
			- 获取当前对象的年份
		
		getHours()
			- 返回 Date 对象的小时 (0 ~ 23)。 
			
		getMinutes() 
			- 返回 Date 对象的分钟 (0 ~ 59)。 
			
		getSeconds() 
			- 返回 Date 对象的秒数 (0 ~ 59)。
			
		getMilliseconds() 
			- 返回 Date 对象的毫秒(0 ~ 999)。 
			
		getTime()
			- 获取当前对象的时间戳
			- 时间戳：
				- 指从1970年1月1日0分0时0秒到现在时间所花费的毫秒数
				- 计算机底层的时间都是以时间戳的形式保存
				
		Date.now()
			- 获取当前的时间戳

					
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
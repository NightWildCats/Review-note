1.方法（method）
	- 对象的属性值可以是任意的数据类型，也可以是一个函数
	- 当一个对象的属性是一个函数时，则我们称这个函数是这个对象的方法
	- 调用函数，称为调用对象的方法
	- 例子：
		var obj = {};
		obj.fun = function(){};
		obj.fun(); //调用方法
		
		alert();//调用函数
		
2.作用域(Scope)
	- 作用域简单来说就是一个变量的作用范围
	- js中作用域分成两种：
		- 全局作用域
		- 函数作用域
	- 全局作用域：
		- 直接编写script标签中的代码都在全局作用域
			<script>
				var a = 123; //a就在全局作用域中
			</script>
			
		- 全局作用域在页面打开时创建，在页面关闭时销毁	
		- 在全局作用域中有一个全局对象window，它代表的是当前的浏览器窗口
		- 在全局作用域中创建的变量都会作为window对象的属性保存
			在全局作用域中创建的函数都会作为window对象的方法保存
		- 在全局作用域中创建的变量在整个页面中都可以看见
				
	- 函数作用域
		- 每执行一次函数就会创建一个新的函数作用域
		- 函数作用域在函数调用时创建，在调用结束后销毁
		- 在函数作用域中可以访问到全局作用域中的变量，
			在全局作用域中不能访问到函数作用域中的变量
		- 如果在函数作用域不使用var声明变量，则这个变量会变成全局变量	
		- 当我们在函数作用域中使用一个变量时，会先在自身作用域中寻找，
			如果找到了则使用，如果没找到则去上一级作用域寻找，如果找到了则使用，找不到则继续
			直到找到全局作用域，如果依然没有，则报错
			
	- 变量的声明提前
		- 使用var关键字声明的变量，会在所有的代码执行之前被声明，但是不会赋值
			但是只会声明，不会赋值，赋值需要等到赋值代码执行时才会完成
		- 如果声明一个变量不使用var关键字，则不会有声明提前的特性，它会等到代码执行时才创建
	- 函数的声明提前
		- 使用函数声明的形式创建的函数，会在所有的代码执行之前被创建
			所以我们可以在函数声明之前就对函数进行调用
		- 使用函数表达式创建的函数，不具有该特性
		
3.this
	- this是函数在执行时，浏览器传递进行的隐含的参数
	- this代表的是函数执行的 上下文对象
	- 根据函数的调用的方式不同，this的值也不同
		1.以函数的形式调用时，this是window
		2.以方法的形式调用时，this就是调用方法的对象
		3.以构造函数的形式调用时，this就是新创建的对象
		
4.构造函数（constructor）
	- 构造函数是专门用来创建对象的函数
		它和普通函数没有什么区别，只是调用的方式不同
		普通函数直接调用，而构造函数需要使用new来调用
	- 构造函数一般都使用大写字母开头
	- 我们也称一个构造函数是一个类，通过该构造函数创建的对象，我们称这个对象是该类实例
		使用同一个构造函数创建的对象，我们称为一类对象。
	- 构造函数的执行的流程：
		1.创建一个的新的对象
		2.将这个新的对象设置为函数中的this
		3.执行函数中的代码
		4.将新创建的对象返回
	- instanceof
		- 这个运算符可以用来检查一个对象是否是一个类的实例
		- 语法：对象 instanceof 构造函数
			- 如果对象是构造函数的实例，则返回true
			- 如果对象不是构造函数的实例，则返回false
		- Object是所有的对象的祖先，所有的对象都是Object的后代，
			所以和Object左instanceof运算都会返回true
			
5.原型（prototype）
	- 我们创建的每一个函数中都会有一个属性叫做prototype，
		这个属性会指向一个对象，这个对象就是我们说的原型对象。
	- 如果函数作为普通的函数去调用，原型对象（prototype）没有任何作用。
	- 如果函数作为构造函数去调用，则通过它所创建的对象中都会有一个隐式的属性（__proto__）,
		来指向该对象。而且每一个通过该函数创建的对象都会有该属性。
	- 原型对象就相当于一个公共的区域，所有的该类的实例都可以访问到。
		当我们去调用一个对象中的属性或方法时，它会现在对象自身中寻找，如果有则使用。
			如果没有则去对象的原型对象中寻找，如果找到则使用。
			如果找不到则去对象的原型的原型对象中寻找，依次类推。。
			Object的原型没有原型，所以直到找到Object的原型时，如果依然没有则返回undefined。
	- 我们可以将对象中共有的属性和方法统一保存到原型对象中，这样只需要添加一次就可以使所有的对象共享。
	- hasOwnProperty()
		- 这个方法可以用来检查一个属性是否属于对象自身
		- 例子：
			obj.hasOwnProperty("name");
			
6.toString()
	- 当我们直接输出一个对象时，实际上就是再输出这个对象的toString()方法的返回值
	
	
		
			
		
		
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
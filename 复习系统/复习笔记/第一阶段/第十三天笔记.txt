1.Math
	- Math并不是一个构造函数，它就是一个对象
		它是一个工具类，它里边封装了数学运算相关的常量和方法
	- 常量：
		Math.PI
			- 圆周率
		。。。

	- 方法：
		Math.abs()
			- 获取一个数的绝对值
		Math.ceil()
			- 对一个数进行向上取整
		Math.floor()
			- 对一个数进行向下取整
		Math.round()	
			- 对一个数进行四舍五入取整
		Math.random()
			- 生成一个0-1之间的随机数
			- 生成一个x-y之间的随机数
				Math.round(Math.random()*(y-x)+x)
		Math.max()
			- 获取多个值中的最大值
		Math.min()	
			- 获取多个值中的最小值
		Math.sqrt()
			- 对一个数进行开方运算
		Math.pow(x,y)
			- 求x的y次幂
			
2.包装类
	- 在JS中，为我们提供了三个包装类
		String()
		Number()
		Boolean()
	- 通过这三个包装类，可以将String Number Boolean的基本数据类型包装为对象
	- 语法：
		var str = new String("");
		var num = new Number(123);
		var bool = new Boolean(true);
	- 不要去创建基本数据类型的对象。
	- 当我们去调用基本数据类型的属性或方法时，解析器会临时将其转换为一个对象
		然后在去操作这个对象的属性或方法，操作完成将对象销毁

3.String
	- 在String对象中有很多字符串相关的方法，由于我们在调用基本数据类型的方法时，
		会将其转换为对象，所以String中的方法都可以直接通过基本数据类型string来调用
	- 在解析器的底层，字符串都是以字符数组的形式保存的，所以字符串的方法和数组都是非常类似的
	- 属性：
		- length
			- 获取字符串的长度
	- 方法：
		- charAt()
			- 根据索引获取指定位置的字符
		- charCodeAt()
			- 根据索引获取指定位置的字符的字符编码
		- String.fromCharCode()
			- 根据字符编码获取字符
		- indexOf()
		- lastIndexOf()
			- 查找指定内容在字符串中的位置
			- 如果找到了，则返回第一次出现的索引，如果没找到则返回-1
			- indexOf是从前往后找，而lastIndexOf是从后往前找
			- 参数：
				第一个：查找的内容
				第二个：查找的开始位置
		- slice()
			- 可以用来截取一个字符串
			- 参数：
				第一个：截取开始位置的索引(包括开始位置)
				第二个：截取结束位置的索引（不包括结束位置）
				- 索引可以是负值，如果是负值则从后往前计算
				- 第二参数可以省略，如果不写则一直截取到最后
				
		- substring()	
			- 可以用来截取一个字符串
			- 参数：
				第一个：截取开始位置的索引(包括开始位置)
				第二个：截取结束位置的索引（不包括结束位置）
				- 索引值不能为负，如果为负，则默认使用0
				- 如果第一个参数大于第二个，则自动交换位置
				- 第二参数可以省略，如果不写则一直截取到最后
				
		- substr()
			- 可以用来截取字符串
			- 参数：
				第一个：截取开始位置的索引(包括开始位置)
				第二个：截取的个数
					- 索引可以是负值，如果是负值则从后往前计算
					- 第二参数可以省略，如果不写则一直截取到最后
					
		- toLowerCase() 
			- 把字符串转换为小写
			
		- toUpperCase() 
			- 把字符串转换为大写	
			
		- match()
			- 从一个字符串中将符合要求的内容提取出来
			- 需要一个正则表达式作为参数，将会根据该正则表达式去字符串中提前内容
				并将其提取到的内容，封装到一个数组中返回
			
		- search()
			- 去一个字符串中搜索指定的内容，如果找到了，则返回内容第一次出现的索引，如果没找到则返回-1
			- 需要一个正则表达式或字符串作为参数，会去字符串中搜索对应的内容
		
		- split()
			- 根据指定的内容将一个字符串拆分为一个数组
			- 需要一个字符串或正则表达式作为参数，将会根据该内容对字符串进行拆分
			
		- replace()	
			- 将字符串中的指定内容替换为新的内容
			- 参数：
				第一个参数，被替换的内容或正则表达式
				第二个参数，新的内容
				
4.正则表达式
	- 正则表达式用来定义一些字符串的规则，程序可以根据该规则
		来检查一个字符串是否符合规则，或者将符合规则的内容提取出来。
	- 创建正则表达式
		- 方式一：
			var 变量 = new RegExp("正则表达式","匹配模式");
			
		- 方式二:
			var 变量 = /正则表达式/匹配模式;
			
	- 正则表达式的方法：
		test()
			- 用来检查一个字符串是否符合正则表达式
			- 如果符合则返回true，否则返回false
				
	- 语法：
		- 匹配模式
			- i
				- 忽略大小写匹配
			- g
				- 全局匹配
				
		- 语法：
			|
				- 表示或 (a|b)
			[] 
				- 表示或 [ab]
			[^ ] 
				- 除了
			[a-z]
				- 小写字母
			[A-z]
				- 任意字母
			[0-9]	
				- 任意数字
			{n}
				- 正好n次
			{m,n} 
				- m-n次
			{m,}
				- 至少m次
			+
				- 至少一次，相当于{1,}
			*
				- 任意次，相当于{0,}
			?
				- 0到1次，相当于{0,1}
			^
				- 表示开头
			$
				- 表示结尾
			.
				- 表示任意字符
			\
				- 转义字符
				- \.
					表示.
				- \\	
					表示\
			\w
				- 任意的字母、数字、下划线 [A-z0-9_]
			\W
				- 除了字母、数字、下划线 [^A-z0-9_]
			\d
				- 任意的数字
			\D
				- 除了数字
			\s
				- 空格
			\S
				- 除了空格
			\b
				- 单词边界
			\B	
				- 除了单词边界













	
		
			
				
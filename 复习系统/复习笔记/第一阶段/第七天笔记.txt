1.标识符
	- 在JS所有可以自主命名的东西都可以认为是一个标识符。
		比如：变量名、函数名、属性名。。。
	- 标识符的规范：
		1.标识符中可以含有字母、数字、_、$，但是不能以数字开头。
		2.标识符不可以是JS中的关键字和保留字
		3.标识符一般要遵守驼峰命名法
			- 驼峰命名法：首字母小写，每个单词的首字母大写
				borderLeftStyle

2.数据类型
	- JS中一共有6种数据类型。
		其中基本数据类型有5种
			String(字符串)
				- 字符串需要使用引号引起来（单引号或双引号都可以）
				- 在字符串中使用\来作为转义字符：
					\'		 	单引号
					\"			双引号
					\\			斜杠
					\n			换行
					\t			制表符
					\uxxxx		Unicode编码
				- 使用typeof检查一个字符串时，会返回string
				- 其他的类型 转换为 字符串
					- 方式一：
						- 调用被转换数据类型的toString()方法
						- 例子：
							var a = 123;
							a = a.toString();
						- 这种方式不适用null和undefined

					- 方式二：
						- 调用String()函数
						- 例子：
							var a = 456;
							a = String(a);
						- 这种方式对于有toString()的值，则调用toString()来转换
							对于null，直接转换为"null"
							对于undefined，直接转换为"undefined"
							
					- 方式三：
						- 为任意的数据类型加一个空串
						- 例子：
							var a = true;
							a = a + "";
						- 这种方式的原理和String()函数是一样，但是更加简单	
					
			
			Number(数值)
				- 在JS中所有的整数和浮点数都是Number类型的
				- 使用typeof检查一个Number类型的数据时，会返回number
				- 特殊的数字：
					NaN 非法的数字
					Infinity 无穷大的数字
					- 对于这两个值，使用typeof都会返回number
				- 大部分的整数运算都可以确保精确，而小数运算可能得到一个不可预期的结果，
					所以不要使用js做一些精度要求高的运算。
				- 其他数据类型 转换为 数值
					- 方式一：
						- 调用Number()函数
						- 例子：
							var a = "123";
							a = Number(a)；
					- 方式二：
						- 在JS中还提供了两个函数，专门用来将一个字符串转换为数字的
						- parseInt()
							- 将字符串中有效的整数解析出来
							- 该函数还可以接收第二个参数，用来指定数字的进制
							- 例子：
								var a = "070";
								a = parseInt(a , 10)；
						- parseFloat()
							- 将字符串中的有效的小数解析出来
							- 例子：
								var a = "6.78px";
								a = parseFloat(a);
								
					- 方式三：
						- 使用一元的+
						- 例子：
							var a = true;
							a = +a;
						- 一元的+原理和Number()函数一样	
						
				- 不同类型的数据转换为数字的情况
					- 字符串：
						- 如果字符串是一个合法的数字，则转换为对应的数字
						- 如果字符串中含有非数字的内容，则转换NaN
						- 如果字符串是空串，或纯空格的字符串，则转换为0
					- 布尔值：
						- true转换为1，false转换为0
					- null转换为0
					- undefined转换为NaN	
					
			Boolean(布尔值)
				- 布尔值主要用来在程序中进行逻辑判断
				- 布尔值只有两个：
					true 表示真
					false 表示假
				- 使用typeof检查一个布尔值时，会返回boolean
				- 其他类型转换为布尔值
					- 方式一：
						- 使用Boolean()函数
						- 例子：
							var a = 1;
							a = Boolean(a);
							
					- 方式二：	
						- 为任意数据类型做两次非运算（取两次反）
						- 例子：
							var a = "hello";
							a = !!a;
						- 原理和Boolean()函数一样	
						
				- 其他类型转换为布尔值的情况
					- String
						- 除了空串，其余的都是true
						
					- Number
						- 除了0和NaN，其余都是true
						
					- Null和Undefined都是false
					
					- 一般情况对象都是true	
					
			Null(空值)
				- Null专门用来表示为空的对象
				- Null类型的值只有一个null
				- 使用typeof检查Null类型的数据时会返回object
			
			Undefined(未定义)
				- Undefined用来表示初始化但是没有赋值的变量的
				- Undefined类型的值只有一个undefined
				- 使用typeof检查一个undefined时，会返回undefined
			
		引用数据类型有1种
			Object(对象)
			
3.运算符（操作符）
	- 通过运算符可以对一个或多个值进行运算，并返回运算结果
	- typeof运算符
		- 用来检查一个变量的数据类型，并将类型返回
		- 语法：typeof 变量
		- typeof运算符返回的结果是个字符串，这个字符串用来描述数据类型

	- 算数运算符
		+ 加法运算
		- 减法运算
		* 乘法运算
		/ 除法运算
		% 取模运算，求两个数相除的余数
			- 算数运算符的规则和数学中的运算规则是一致，
				除了加法，其余的运算如果是非数值类型的变量做运算，则会先将其转换为数值然后再运算。
			- 加法运算时，如果操作数中有字符串，则会将其他的数据转换为字符串然后做拼串的操作。

	- 一元运算符：
		- 一元运算符只需要一个操作数
		+
			- 一元的加，正号
			- 一元的加，不会对值产生任何影响
		-
			- 一元的减，负号
			- 一元的减，会对值进行负号位取反
			
		- 如果对非数字进行一元的±运算，会先将其转换为Number然后再运算
		
		
		自增++
			- 自增指使变量在原值的基础上增加1
			- 使用++来做自增运算，++分为前++（++a） 和后++（a++）
			- 无论是++a 还是 a++都会使原变量立即自增1
			- 不同是 ++a 的值是变量自增后的值（新值）
				而 a++的值是变量自增前的值（原值）
		
		自减--
			- 自减指使变量在原值的基础上减去1
			- 使用--来做自减运算，--分为前-- （--a） 和后--（a--）
			- 无论是--a 还是 a--都会使原变量立即自减1
			- 不同是 --a 的值是变量自减后的值（新值）
				而 a--的值是变量自减前的值（原值）
				
	- 逻辑运算符
		!
			- 逻辑非运算，可以对一个值进行非运算
			- 非运算会对一个布尔值进行取反操作，true变false，false变true
			- 如果对一个非布尔值进行取反操作，它会将其转换为布尔值，然后再取反
		
		
		
		
		
		
		
		
			
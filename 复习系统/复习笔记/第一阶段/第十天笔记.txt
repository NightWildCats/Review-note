1.对象
	- 对象是一个复合数据类型，它里边可以保存不同类型的属性
	- 对象的分类：
		1.内建对象
			- 由ES标准定义的对象，任何的对ES的实现都可以使用这些对象
		2.宿主对象
			- 由JS运行环境提供的对象，目前主要指浏览器
		3.自定义对象
			- 由我们自己创建的对象
	- 创建对象
		- 方式一：
			var obj = new Object();
		- 方式二:
			var obj = {};
			
	- 向对象中添加和读取属性
		- 语法：
			方式一：
				添加：
					对象.属性名 = 属性值
				读取：
					对象.属性名
			方式二；
				添加:
					对象["属性名"] = 属性值
				读取：
					对象["属性名"]
				
		- 属性名不用遵循标识符规范，可以起任何的乱七八糟的名字
			如果名字实在是太奇怪了，可以采用方式二来添加属性。
		- 但是开发中还是尽量按照标识符的规范去做
		- 属性值，对象的属性值可以是任意的数据类型。
		
	- 删除属性
		- 使用delete来删除对象中的属性
		- 语法：delete 对象.属性名
		
	- in
		- 使用in可以检查一个对象中是否含有指定的属性
		- 语法："属性名" in 对象
		
	- for...in
		- 可以用来枚举对象中的属性
		- 语法：
			for(变量 in 对象){
				...
			}
			
	- 使用typeof检查一个对象时，会返回object

2.函数（function）
	- 函数也是一个对象，对象能干的事函数都能干，
		而且函数中可以保存一些可执行的代码，并且在需要的时候可以让这些代码反复的执行。
	- 函数的创建
		- 函数声明
			function 函数名([形参1,形参2...形参N]){
				语句...
			}
			
			function sum(a , b ,c){
			
			}
			
			sum(1,2,3);
		
		- 函数表达式
			var 函数名 = function([形参1,形参2...形参N]){
				语句...
			};
			
		- 匿名函数	
			function([形参1,形参2...形参N]){
				语句...
			};
			
	- 函数的调用
		- 语法：函数对象()
		
	- 形参（形式参数）
		- 定义函数时，可以在函数中指定数量不等的形参，
			多个形参之间使用,隔开。
		- 定义形参就相当于在函数中创建了相应的变量，但是并不赋值
		
	- 实参（实际参数）
		- 调用函数时，可以在函数中传递实参，
			实参会赋值给函数对应的形参。
		- 调用函数时，JS解析器不会检查实参的类型和个数
			可以传递任意类型的实参
		- 也不会检查实参的个数，
			如果实参小于形参的个数，则没有对应实参的形参将会使undefined
			如果实参大于形参的个数，则多余的实参不会使用
			
	- 返回值
		- 返回值是函数的执行的结果
		- 通过return来设置函数的返回值
		- 语法：
			return 值;
		- 如果不写return，或return后不跟值，则相当于return undefined;
		- return后的代码将不会执行，移动执行return，则立即退出函数	
		- 任何的数据类型都可以作为返回值	
		
	- break、continue和return
		break 用来退出当前循环
		continue 用来跳过当次循环
		return 用来退出函数

3.基本数据类型和引用数据类型
	- 变量在保存基本数据类型时，是直接保存的值
		值与值之间的相互独立的，修改一个变量不会影响其他的变量
	- 比较两个值是否相等时，基本数据类型比较的是值，而引用数据类型比较的是地址	
		
	- 变量在保存一个引用数据类型（对象）时，是保存的对象的引用（内存地址）
		如果两个变量所指向的对象是同一个，则修改一个变量有可能影响到另一个
		
		
	
		
		
		
			
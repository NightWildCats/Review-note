1.DOM
	- Document Object Model（文档对象模型）
	- DOM就是让我们可以通过JS来操作网页
		- 文档
			- 文档指的是整个网页文档
		- 对象
			- 将网页中的每一个部分都转换为了一个对象
		- 模型
			- 通过模型来表示对象之间的关系，方便我们查找对象
			
	- 节点（Node）
		- 节点是构成网页的最基本的单位，网页就是由一个一个的节点构成
		- 节点又分为多种不同的类型：
			- 文档节点（document）
				- 代表的是整个网页
			- 元素节点（element）
				- 代表网页中的标签
			- 属性节点（attribute）
				- 代表标签中的属性
			- 文本节点（text）
				- 代表网页中的文本
				
	- DOM查询：
		- 通过document对象调用的：
			- 根据元素的id属性值，查找一个元素节点对象
				document.getElementById("id属性值");
				
			- 根据标签名，查询一组元素节点对象
				document.getElementsByTagName("标签名");
				
			- 根据元素的name属性值，查找一组元素节点对象
				document.getElementsByName("name属性值");
				
		- 通过具体的元素节点调用的:
			- 元素.getElementsByTagName("标签名");
				- 查找指定元素的指定的后代元素
				
			- 元素.childNodes
				- 获取当前元素的所有的子节点
				- 包括空白的文本节点
				
			- 元素.children
				- 获取当前元素的所有的子元素
				- 不包括文本节点
				
			- 元素.firstChild
				- 获取当前元素的第一个子节点
				
			- 元素.lastChild
				- 获取元素的最后一个子节点
				
			- 元素.parentNode
				- 获取当前元素的父节点
				
			- 元素.previousSibling
				- 获取当前元素的前一个兄弟节点
				
			- 元素.nextSibling
				- 获取当前元素的后一个兄弟节点
				
		- 元素的属性
			- 读取元素的属性
				- 元素.属性名
				- 特殊：class，需要使用  元素.className
				
			- 修改元素的属性
				- 元素.属性名 = 属性值
				
			- innerHTML
				- 获取和设置元素内部的HTML代码
				- 通过innerHTML获取到的内容，会包含HTML代码
				
			- innerText	
				- 获取和设置元素内部的文本内容
				- 通过innerText获取到的内容，会自动去除HTML标签
				
			- 读取标签中的文本内容：
				<h1>我是h1中的文字</h1>
				元素.firstChild.nodeValue;
				
				
	事件（Event）
		- 事件指的用户和网页或浏览器之间的交互行为，
			比如：打开网页，关闭窗口，点击按钮，鼠标移动，调整窗口大小。。。。。
		- 我们需要为事件绑定响应函数来处理事件。
		- 为元素绑定事件的响应函数：
			1.通过标签的指定的属性来设置
				<button onclick="js代码">按钮</button>
				
			2.在script标签中为元素绑定事件的响应函数
				<button id="btn">按钮</button>
				<script>
					var btn = document.getElementById("btn");
					btn.onclick = function(){};
				</script>
				
		- 文档的加载
			- 浏览器在加载一个页面时，是按照自上向下的顺序加载的，
				如果将js代码写在页面的最上边，在js代码执行时，页面还没有加载完毕
				就会导致无法正常获取到DOM对象。
			- 解决方案：
				1.可以将js代码写在body标签的下边，这样js代码会在最后执行，此时页面一定已经加载完毕
				
				2.可以将js代码写在window.onload = function(){};里边
					onload的回调函数，会在页面加载完毕以后执行，这样可以确保代码执行时，页面已经加载完毕了。
			
				
				
				
				
				
				
				
				
				
				
				
				
				
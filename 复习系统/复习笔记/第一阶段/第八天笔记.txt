1.运算符
	- 逻辑运算符
		- 逻辑与
			- 使用 && 来做逻辑与运算
			- 运算规则：
				- 如果符号两端的值都是true，则返回true
					两个值中只要有一个是false，则返回false
				- 与是短路的与，如果第一个值是false，则不看第二个值
				- 对于非布尔值做与运算时，会将其转换为布尔值，然后再运算
					最终会返回原值。
				- 如果第一个值是false，则返回第一个。否则返回第二个
		
		- 逻辑或
			- 使用 || 来做逻辑或运算
			- 运算规则：
				- 如果符合两端都是false，则返回false
					两个值中只要有一个true，就返回true
				- 或是短路的或，如果第一个值是true，则不看第二个值
				- 对于非布尔值做或运算时，会将其转换为布尔值，然后再运算
					最终会返回原值。
				- 如果第一个值是true，则返回第一个。否则返回第二个

	- 赋值运算符
		- 赋值运算符可以将符号右侧的值赋值给符号左侧的变量
		- 比如：=   a = 10;  a = b;
		=
			- 将符号右侧的值赋值给符号左侧的变量
		+=
			- a += 10 等价于 a = a + 10;
		-=
			- a -= 10 等价于 a = a - 10;
		*=
			- a *= 10 等价于 a = a * 10;
		/=
			- a /= 10 等价于 a = a / 10;
		%=
			- a %= 10 等价于 a = a % 10;
			
	- 关系运算符
		- 关系运算符用来比较两个变量之间的大小关系，如果关系成立，则返回true，否则返回false
		>	大于
		>=  大于或等于
		<   小于
		<=  小于或等于
		- 关系运算符的运算规则和数学中一样，
			对于非数值类型的变量比较时，它会将其转换为数值然后在比较
			如果符号的两侧都是字符串(String)，则不会将其转换为数字，
				而是逐位比较它们的Unicode编码，可以使用该特点来将字符串按照字母顺序排序
				但是注意如果比较的是两个数值型的字符串时，可能会出现错误的结果
				
	- 相等运算符和全等运算符
		==
			- 相等运算符，判断符号两侧的值是否相等，如果相等则返回true，否则返回false
			- 对于不同的数据类型比较时，相等运算符会做自动的类型转换，如果转换后相等也会返回true
		!=
			- 不等运算符，判断符号两侧的值是否不等，如果不等则返回true，否则返回false
			- 对于不同的数据类型比较时，不等会做自动的类型转换，如果转换后相等也会发回false
			
		===
			- 全等运算符，判断符号两侧的值是否全等，如果全等则返回true，否则返回false
			- 全等不会做自动的类型转换，如果比较的两个值的类型不同，直接返回false
		!==
			- 不全等运算符，判断符号两侧的值是否不全等，如果不全等则返回true，否则返回false
			- 不会做自动的类型转换，如果两个值的类型不同，直接返回true
			
		特殊值：
			null 和 undefined
				- 由于undefined衍生自null的，所以这两个值做相等比较时会返回true，但是全等比较时会返回false
					undefined == null; // true
					undefined === null ; //false
			
			NaN
				- NaN和任何值都不相等，包括它自身
				- NaN == NaN; //false 
				- 我们可以通过isNaN()函数来判断一个变量是否是NaN
					- 如果是NaN，则返回true，否则返回false
						isNaN(NaN); //true
						isNaN(123); //false
						
	- 三元运算符
		- 语法：
			条件表达式?语句1:语句2;
		- 执行流程：
			三元运算符执行时，会先对条件表达式进行求值判断，
				如果判断结果为true，则执行语句1，并返回结果
				如果判断结果为false，则执行语句2，并返回结果
				
	- 运算符的优先级
		- 和数学中一样，JS中的运算符也具有优先级，
			比如：先乘、除、取模 后加、减。先&& 后|| 。。。
		- 运算符的优先级可以通过优先级的表格来查询，
			在表格中越靠上的优先级越高，优先级越高的越优先计算
			如果优先级一样，则按照自左向右的顺序计算。
		- 可以通过()来改变运算符的优先级。
		
2.代码块
	- 我们可以使用{}将一组代码括起来，括起来的代码称为一组代码，
		{}中的代码要么都执行，要么都不执行
	- {}中的代码我们就称为是一个代码块
	- JS中的代码块，只具有分组的作用，没有其他的作用

3.流程控制语句
	- JS的程序默认自上向下一行一行执行的，通过流程控制语句可以改变代码的执行的顺序，
		也可以将指定代码反复执行多次。
	- 分类：
		1.条件判断语句
		2.条件分支语句
		3.循环语句
		
	- 条件判断语句
		- 也称if语句
		- 语法一(if)；
			if(条件表达式){
				语句...
			}
			
			- 执行流程：
				执行时，会先对if后的条件表达式进行求值判断
					如果结果为true，则执行if后的语句
					如果结果为false，则不执行
				如果条件表达式的结果是一个非布尔值，则会先将其转换为布尔值，然后在判断	
			
			
			
		- 语法二(if...else...):
			if(条件表达式){
				语句...
			}else{
				语句...
			}
			
			- 执行流程：
				执行时，会先对if后的条件表达式进行求值判断
					如果结果为true，则执行if后的语句
					如果结果为false，则执行else后的语句
			
			
		- 语法三(if...else if...else...):
			if(条件表达式){
				语句...
			}else if(条件表达式){
				语句...
			}else if(条件表达式){
				语句...
			}else if(条件表达式){
				语句...
			}else{
				语句...
			}
					
			- 执行流程：
				执行时，会自上至下依次对if后的条件表达式进行求值判断，
					如果判断结果为true，则执行当前if后的语句，执行完毕结束语句
					如果判断结果为false，则继续向下判断，直到找到为true的为止
					如果所有的判断结果都是false，则执行else中的语句
				




		